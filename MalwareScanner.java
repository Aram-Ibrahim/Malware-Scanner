import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.DigestInputStream;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.List;

public class MalwareScanner 
{
    public static void main(String[] args) 
    {
        if (args.length != 2) 
        {
            System.err.println("Usage: java MalwareScanner <malware_signatures_file> <target_file/folder(directory)>");
            System.exit(1);
        }

        String malSigsFile = args[0];
        String target = args[1];

        List<String> malSigs = loadMalSigs(malSigsFile);

        File targetFile = new File(target);
        if (targetFile.isFile()) 
        {
            scanFile(targetFile, malSigs);
        } 
        else if (targetFile.isDirectory()) 
        {
            scanDirectory(targetFile, malSigs);
        } 
        else 
        {
            System.err.println("Invalid target: " + target);
            System.exit(1);
        }

        
    }

private static void scanDirectory(File directory, List<String> malSigs) 
{
    File[] files = directory.listFiles();
    if (files != null) 
    {
        int fileCount = files.length;
        int fileIndex = 0;
        for (File file : files) 
        {
            fileIndex++;
            System.out.print("Scanning " + file.getAbsolutePath() + " (" + fileIndex + "/" + fileCount + ")... ");
            if (file.isFile()) 
            {

                String fileHash = calFileHash(file);

                if (malSigs.contains(fileHash)) 
                {
                    System.out.println("Malware detected: " + file.getAbsolutePath());
                    saveScanDetected("Detected.txt", file.getAbsolutePath());
                } 
                else 
                {
                    System.out.println("Clean");
                }
            } 
            else if (file.isDirectory()) 
            {
                scanDirectory(file, malSigs);
            }
            System.out.println("Progress: " + (fileIndex * 100 / fileCount) + "%");
        }
    }
}

private static void scanFile(File file, List<String> malSigs) 
{
    System.out.print("Scanning " + file.getAbsolutePath()+" ");

    String fileHash = calFileHash(file);

    if (malSigs.contains(fileHash)) 
    {
        System.out.println("Malware detected: " + file.getAbsolutePath());
        saveScanDetected("Detected.txt", file.getAbsolutePath());
    } 
    else 
    {
        System.out.println("Clean");
    }
    System.out.println("Progress: 100%");
}


    private static List<String> loadMalSigs(String fileName) 
    {
        List<String> malSigs = new ArrayList<>();
        try 
        {
            Files.lines(Paths.get(fileName))
                    .forEach(line -> malSigs.add(line.trim()));
        }
        catch (IOException e) 
        {
            System.err.println("Error loading malware signatures: " + e.getMessage());
        }
        return malSigs;
    }

   private static String calFileHash(File file) 
   {
        try 
        {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            try (DigestInputStream dis = new DigestInputStream(new FileInputStream(file), md)) 
            {
                byte[] buffer = new byte[8192];
                while (dis.read(buffer) != -1) {}
            }
            byte[] hashBytes = md.digest();
            return bytesToHex(hashBytes);
        } 
        catch (NoSuchAlgorithmException | IOException e) 
        {
            System.err.println("Error calculating file hash: " + e.getMessage());
            return null;
        }
    }

    private static String bytesToHex(byte[] bytes) 
    {
        StringBuilder hexString = new StringBuilder();
        for (byte b : bytes) 
        {
            hexString.append(String.format("%02x", b));
        }
        return hexString.toString();
    }

    private static void saveScanDetected(String fileName, String results) 
    {
        try 
        {
            Files.write(Paths.get(fileName), results.getBytes());
        } 
        catch (IOException e) 
        {
            System.err.println("Error saving scan results: " + e.getMessage());
        }
    }
}
